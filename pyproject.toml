[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-triad-constitutional"
version = "2.0.0"
description = "Westminster Parliamentary AI System with Constitutional Governance"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "AI Triad Constitutional Team" },
]
keywords = [
    "ai",
    "agents",
    "westminster",
    "parliamentary",
    "constitutional",
    "governance",
    "automation",
    "pydantic",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "pydantic-ai-slim[anthropic,openai,logfire]>=0.0.14",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "prisma>=0.13.1",
    "logfire>=0.51.0",
    "httpx>=0.27.0",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "pydantic-settings>=2.0.0",
    "asyncio-mqtt>=0.16.0",
    "prometheus-client>=0.21.0",
    "pydantic-ai-graph>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0",
    "ruff>=0.7.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]
docker = [
    "psycopg2-binary>=2.9.0",
]

[project.urls]
Homepage = "https://github.com/your-org/ai-triad-constitutional"
Documentation = "https://ai-triad-constitutional.readthedocs.io"
Repository = "https://github.com/your-org/ai-triad-constitutional.git"
Issues = "https://github.com/your-org/ai-triad-constitutional/issues"

[tool.hatch.build.targets.wheel]
packages = ["triad"]

[tool.black]
line-length = 100
target-version = ['py311']

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "--strict-markers --strict-config --cov=triad"
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "constitutional: marks tests as constitutional compliance tests",
    "parliamentary: marks tests as parliamentary procedure tests",
]